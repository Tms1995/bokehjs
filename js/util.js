// Generated by CoffeeScript 1.4.0
(function() {
  var Collections, base, make_plot, typeIsArray, zip;

  base = require("./base");

  Collections = base.Collections;

  typeIsArray = function(value) {
    return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));
  };

  zip = function() {
    var arr, i, length, lengthArray, _i, _results;
    lengthArray = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arr = arguments[_i];
        _results.push(arr.length);
      }
      return _results;
    }).apply(this, arguments);
    length = Math.min.apply(Math, lengthArray);
    _results = [];
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      _results.push((function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = arguments.length; _j < _len; _j++) {
          arr = arguments[_j];
          _results1.push(arr[i]);
        }
        return _results1;
      }).apply(this, arguments));
    }
    return _results;
  };

  make_plot = function(div_id, data_source, defaults, glyphspecs, xrange, yrange, _arg) {
    var axes, boxselectionoverlay, dims, div, ds, g, glyph, glyphs, glyphspec, idx, legend, legend_name, legend_renderer, legends, myrender, pantool, plot_model, plot_title, plot_tools, pstool, reference_point, resizetool, selecttool, tools, val, x, xaxis1, xaxis2, xrule, yaxis1, yaxis2, yrule, zoomtool, _i, _j, _k, _len, _len1, _len2, _ref;
    dims = _arg.dims, tools = _arg.tools, axes = _arg.axes, legend = _arg.legend, legend_name = _arg.legend_name, plot_title = _arg.plot_title, reference_point = _arg.reference_point;
    if (dims == null) {
      dims = [400, 400];
    }
    if (tools == null) {
      tools = true;
    }
    if (axes == null) {
      axes = true;
    }
    if (legend == null) {
      legend = true;
    }
    if (legend_name == null) {
      legend_name = "glyph";
    }
    if (plot_title == null) {
      plot_title = "";
    }
    glyphs = [];
    if (!_.isArray(glyphspecs)) {
      glyphspecs = [glyphspecs];
    }
    if (!_.isArray(data_source)) {
      for (_i = 0, _len = glyphspecs.length; _i < _len; _i++) {
        glyphspec = glyphspecs[_i];
        glyph = Collections('GlyphRenderer').create({
          data_source: data_source.ref(),
          glyphspec: glyphspec,
          nonselection_glyphspec: {
            fill_alpha: 0.1,
            line_alpha: 0.1
          },
          reference_point: reference_point
        });
        glyph.set(defaults);
        glyphs.push(glyph);
      }
    } else {
      _ref = zip(glyphspecs, data_source);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        val = _ref[_j];
        glyphspec = val[0], ds = val[1];
        glyph = Collections('GlyphRenderer').create({
          xdata_range: xrange.ref(),
          ydata_range: yrange.ref(),
          data_source: ds.ref(),
          glyphspec: glyphspec
        });
        glyph.set(defaults);
        glyphs.push(glyph);
      }
    }
    plot_model = Collections('Plot').create({
      x_range: xrange.ref(),
      y_range: yrange.ref(),
      canvas_width: dims[0],
      canvas_height: dims[1],
      outer_width: dims[0],
      outer_height: dims[1],
      title: plot_title
    });
    plot_model.set(defaults);
    plot_model.add_renderers((function() {
      var _k, _len2, _results;
      _results = [];
      for (_k = 0, _len2 = glyphs.length; _k < _len2; _k++) {
        g = glyphs[_k];
        _results.push(g.ref());
      }
      return _results;
    })());
    if (axes) {
      xaxis1 = Collections('GuideRenderer').create({
        guidespec: {
          type: 'linear_axis',
          dimension: 0,
          location: 'min',
          bounds: 'auto'
        },
        axis_label: 'x',
        plot: plot_model.ref()
      });
      yaxis1 = Collections('GuideRenderer').create({
        guidespec: {
          type: 'linear_axis',
          dimension: 1,
          location: 'min',
          bounds: 'auto'
        },
        axis_label: 'y',
        plot: plot_model.ref()
      });
      xaxis2 = Collections('GuideRenderer').create({
        guidespec: {
          type: 'linear_axis',
          dimension: 0,
          location: 'max',
          bounds: 'auto'
        },
        axis_label: 'x',
        plot: plot_model.ref()
      });
      yaxis2 = Collections('GuideRenderer').create({
        guidespec: {
          type: 'linear_axis',
          dimension: 1,
          location: 'max',
          bounds: 'auto'
        },
        axis_label: 'y',
        plot: plot_model.ref()
      });
      xrule = Collections('GuideRenderer').create({
        guidespec: {
          type: 'rule',
          dimension: 0,
          bounds: 'auto'
        },
        plot: plot_model.ref()
      });
      yrule = Collections('GuideRenderer').create({
        guidespec: {
          type: 'rule',
          dimension: 1,
          bounds: 'auto'
        },
        plot: plot_model.ref()
      });
      plot_model.add_renderers([xrule.ref(), yrule.ref(), xaxis1.ref(), yaxis1.ref(), xaxis2.ref(), yaxis2.ref()]);
    }
    if (tools) {
      pantool = Collections('PanTool').create({
        dataranges: [xrange.ref(), yrange.ref()],
        dimensions: ['width', 'height']
      });
      zoomtool = Collections('ZoomTool').create({
        dataranges: [xrange.ref(), yrange.ref()],
        dimensions: ['width', 'height']
      });
      selecttool = Collections('SelectionTool').create({
        renderers: (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = glyphs.length; _k < _len2; _k++) {
            x = glyphs[_k];
            _results.push(x.ref());
          }
          return _results;
        })()
      });
      boxselectionoverlay = Collections('BoxSelectionOverlay').create({
        tool: selecttool.ref()
      });
      resizetool = Collections('ResizeTool').create();
      pstool = Collections('PreviewSaveTool').create();
      plot_tools = [pantool, zoomtool, pstool, resizetool, selecttool];
      plot_model.set_obj('tools', plot_tools);
      plot_model.add_renderers([boxselectionoverlay.ref()]);
    }
    if (legend) {
      legends = {};
      legend_renderer = Collections("AnnotationRenderer").create({
        plot: plot_model.ref(),
        annotationspec: {
          type: "legend",
          orientation: "top_right",
          legends: legends
        }
      });
      for (idx = _k = 0, _len2 = glyphs.length; _k < _len2; idx = ++_k) {
        g = glyphs[idx];
        legends[legend_name + String(idx)] = [g.ref()];
      }
      plot_model.add_renderers([legend_renderer.ref()]);
    }
    div = $(div_id);
    myrender = function() {
      var view;
      view = new plot_model.default_view({
        model: plot_model
      });
      return div.append(view.$el);
    };
    return _.defer(myrender);
  };

  this.make_plot = make_plot;

}).call(this);
